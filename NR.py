import numpy as np
import matplotlib.pyplot as plt

def f(u, x, t):
    return u - np.sin(x - u * t)

def df(u, x, t):
    return 1 + t * np.cos(x - u * t)

def newton_raphson(u0, x, t, tol=1e-7, max_iter=100):
    u = u0
    for iteration in range(max_iter):
        delta_u = f(u, x, t) / df(u, x, t)
        u = u - delta_u
        if np.any(np.abs(delta_u)) < tol:
            break
    return u, iteration

def initial_condition(x):
    return np.sin(x)

x = np.linspace(0, 2 * np.pi, 100)
t = 0.99
initial_guess = initial_condition(x)
solution, num_iterations = newton_raphson(initial_guess, x, t)
print(solution)
np.savetxt('solution.txt', solution)
x = np.linspace(0,2*np.pi,100)
# The value of u in t = 0.99
u = [0.000000000000000000e+00, 3.189000531145801814e-02, 6.376369284805596949e-02, 9.560467868911368128e-02, 1.273964459002863148e-01, 1.591222762064163632e-01, 1.907651794367639930e-01, 2.223078199263856525e-01, 2.537324389909464961e-01, 2.850207725047786966e-01, 3.161539625003285114e-01, 3.471124615669083924e-01, 3.778759286525466554e-01, 4.084231146573533144e-01, 4.387317359412373774e-01, 4.687783335410965480e-01, 4.985381154875651033e-01, 5.279847791092407983e-01, 5.570903095872132837e-01, 5.858247502407482044e-01, 6.141559390412795194e-01, 6.420492046065638947e-01, 6.694670133394545752e-01, 6.963685573369563508e-01, 7.227092700551650539e-01, 7.484402532666997176e-01, 7.735075942981617381e-01, 7.978515464728578310e-01, 8.214055375143242133e-01, 8.440949595222217994e-01, 8.658356787294411161e-01, 8.865321816518552112e-01, 9.060752434781575992e-01, 9.243389599607354512e-01, 9.411769182010949475e-01, 9.564171823283718066e-01, 9.698556164773005639e-01, 9.812468237055425035e-01, 9.902915807098606749e-01, 9.966189728236373169e-01, 9.997602431811960511e-01, 9.991091702329822910e-01, 9.938594905931417145e-01, 9.829009029538432474e-01, 9.646347789178213450e-01, 9.366190860719695310e-01, 8.948014191227783298e-01, 8.315603430678832897e-01, 7.291058501704879014e-01, 5.182350239836372996e-01, -5.182350239836382988e-01, -7.291058501704884565e-01, -8.315603430678843999e-01, -8.948014191227781078e-01, -9.366190860719696420e-01, -9.646347789178211229e-01, -9.829009029538431363e-01, -9.938594905931416035e-01, -9.991091702329822910e-01, -9.997602431811960511e-01, -9.966189728236372058e-01, -9.902915807098606749e-01, -9.812468237055423925e-01, -9.698556164773005639e-01, -9.564171823283718066e-01, -9.411769182010950585e-01, -9.243389599607353402e-01, -9.060752434781574882e-01, -8.865321816518552112e-01, -8.658356787294411161e-01, -8.440949595222217994e-01, -8.214055375143241022e-01, -7.978515464728579420e-01, -7.735075942981617381e-01, -7.484402532666997176e-01, -7.227092700551649429e-01, -6.963685573369563508e-01, -6.694670133394550193e-01, -6.420492046065638947e-01, -6.141559390412795194e-01, -5.858247502407482044e-01, -5.570903095872131727e-01, -5.279847791092407983e-01, -4.985381154875652698e-01, -4.687783335410965480e-01, -4.387317359412369888e-01, -4.084231146573532589e-01, -3.778759286525465999e-01, -3.471124615669086144e-01, -3.161539625003281784e-01, -2.850207725047784746e-01, -2.537324389909467737e-01, -2.223078199263856525e-01, -1.907651794367640485e-01, -1.591222762064163632e-01, -1.273964459002862870e-01, -9.560467868911340372e-02, -6.376369284805570581e-02, -3.189000531145820549e-02, -2.449293598294706414e-16]
# Plotting the data
plt.plot(x, u)
plt.plot(x, solution)
plt.legend('ZN')
plt.xlabel('x')
plt.ylabel('u')
plt.title('Solution of u(x, t) for t = 1.0')
plt.grid(True)
plt.show()


